perf["F1"] <- f1
perf["MCC"] <- mcc
perf["MSE"] <- mean((B - B_orig)^2)
}
return(perf)
}
error_B(fit_mSSL_dpe$B, B.orig)
apply(fit_mSSL_dpe$B_path, MAR = 3, B_orig = B_orig)
apply(fit_mSSL_dpe$B_path, MAR = 3, FUN = error_B)
apply(fit_mSSL_dpe$B_path, MAR = 3, FUN = error_B, B_orig = B.orig)
tmp <- apply(fit_mSSL_dpe$B_path, MAR = 3, FUN = error_B, B_orig = B.orig)
names(fit_mSSL_dpe)
rownames(tmp)
fit_dpe <- fit_mSSL_dpe
library(Rcpp)
library(RcppArmadillo)
library(SSLASSO)
library(MASS)
library(mSSL)
# This is the low-dimensional example
n <- 100
p <- 50
q <- 25
rho <- 0.9
set.seed(129)
SigmaX <- 0.7^(abs(outer(1:p, 1:p, "-")))
X <- mvrnorm(n, rep(0, times = p), SigmaX)
B.orig <- matrix(sample(c(runif(floor(p*q*0.2), -2,2),
rep(0, times = p*q - floor(p*q*0.2)))),
nrow = p, ncol = q)
XB <- X %*% B.orig
Sigma_orig <- rho^(abs(outer(1:q, 1:q, "-")))
Omega_orig <- solve(Sigma_orig)
Omega_orig[abs(Omega_orig) < 1e-3] <- 0
set.seed(130)
E <- mvrnorm(n, rep(0, times = q), Sigma_orig)
Y <- XB + E
fit_mSSL_dpce <- mSSL_dcpe(X,Y)
fit_mSSL_dpe <- mSSL_dpe(X,Y)
fit_sep_sslg <- sep_sslg(X, Y)
error_B()
library(mSSL)
library(Rcpp)
library(RcppArmadillo)
library(SSLASSO)
library(MASS)
library(mSSL)
error_B
n <- 100
p <- 50
q <- 25
rho <- 0.9
set.seed(129)
SigmaX <- 0.7^(abs(outer(1:p, 1:p, "-")))
X <- mvrnorm(n, rep(0, times = p), SigmaX)
B.orig <- matrix(sample(c(runif(floor(p*q*0.2), -2,2),
rep(0, times = p*q - floor(p*q*0.2)))),
nrow = p, ncol = q)
XB <- X %*% B.orig
Sigma_orig <- rho^(abs(outer(1:q, 1:q, "-")))
Omega_orig <- solve(Sigma_orig)
Omega_orig[abs(Omega_orig) < 1e-3] <- 0
set.seed(130)
E <- mvrnorm(n, rep(0, times = q), Sigma_orig)
Y <- XB + E
fit_mSSL_dpce <- mSSL_dcpe(X,Y)
fit_mSSL_dpe <- mSSL_dpe(X,Y)
fit_sep_sslg <- sep_sslg(X, Y)
names(fit_mSSL_dpe)
fit_mSSL_dpe$early_term[1:10]
sum(fit_mSSL_dpe$early_term)
which(fit_mSSL_dpe$early_term == 0)
which(fit_mSSL_dpe$early_term == 1)
library(Rcpp)
library(RcppArmadillo)
library(SSLASSO)
library(MASS)
library(mSSL)
error_B
library(Rcpp)
library(RcppArmadillo)
library(SSLASSO)
library(MASS)
library(mSSL)
error_B()
error_B
n <- 100
p <- 50
q <- 25
rho <- 0.9
set.seed(129)
SigmaX <- 0.7^(abs(outer(1:p, 1:p, "-")))
X <- mvrnorm(n, rep(0, times = p), SigmaX)
B.orig <- matrix(sample(c(runif(floor(p*q*0.2), -2,2),
rep(0, times = p*q - floor(p*q*0.2)))),
nrow = p, ncol = q)
XB <- X %*% B.orig
Sigma_orig <- rho^(abs(outer(1:q, 1:q, "-")))
Omega_orig <- solve(Sigma_orig)
Omega_orig[abs(Omega_orig) < 1e-3] <- 0
set.seed(130)
E <- mvrnorm(n, rep(0, times = q), Sigma_orig)
Y <- XB + E
fit_mSSL_dpce <- mSSL_dcpe(X,Y)
fit_mSSL_dpe <- mSSL_dpe(X,Y)
fit_sep_sslg <- sep_sslg(X, Y)
error_B(fit_mSSL_dpe$B, B.orig)
round(error_B(fit_mSSL_dpe$B, B.orig), digits = 2)
error_B(fit_mSSL_dcpe$B, B.orig)
fit_mSSL_dcpe <- mSSL_dcpe(X,Y)
error_B(fit_mSSL_dcpe$B, B.orig)
round(error_B(fit_mSSL_dpe$B, B.orig), digits = 4)
round(error_B(fit_mSSL_dcpe$B, B.orig), digits = 4)
library(Rcpp)
library(RcppArmadillo)
library(SSLASSO)
library(MASS)
library(mSSL)
# This is the low-dimensional example
n <- 100
p <- 50
q <- 25
rho <- 0.9
set.seed(129)
SigmaX <- 0.7^(abs(outer(1:p, 1:p, "-")))
X <- mvrnorm(n, rep(0, times = p), SigmaX)
B.orig <- matrix(sample(c(runif(floor(p*q*0.2), -2,2),
rep(0, times = p*q - floor(p*q*0.2)))),
nrow = p, ncol = q)
XB <- X %*% B.orig
Sigma_orig <- rho^(abs(outer(1:q, 1:q, "-")))
Omega_orig <- solve(Sigma_orig)
Omega_orig[abs(Omega_orig) < 1e-3] <- 0
set.seed(130)
E <- mvrnorm(n, rep(0, times = q), Sigma_orig)
Y <- XB + E
fit_mSSL_dpe <- mSSL_dpe(X,Y)
fit_mSSL_dpe$time
a <- Sys.time()
a
b <- Sys.time()
b - a
is.numeric(b - a)
as.numeric(b - a)
as.numeric(a)
as.numeric(b) - as.numeric(a)
as.numeric(b)
library(SSLASSO)
library(MASS)
library(mSSL)
n <- 100
p <- 50
q <- 25
rho <- 0.9
set.seed(129)
SigmaX <- 0.7^(abs(outer(1:p, 1:p, "-")))
X <- mvrnorm(n, rep(0, times = p), SigmaX)
B.orig <- matrix(sample(c(runif(floor(p*q*0.2), -2,2),
rep(0, times = p*q - floor(p*q*0.2)))),
nrow = p, ncol = q)
XB <- X %*% B.orig
Sigma_orig <- rho^(abs(outer(1:q, 1:q, "-")))
Omega_orig <- solve(Sigma_orig)
Omega_orig[abs(Omega_orig) < 1e-3] <- 0
set.seed(130)
E <- mvrnorm(n, rep(0, times = q), Sigma_orig)
Y <- XB + E
fit_mSSL_dcpe <- mSSL_dcpe(X,Y)
fit_mSSL_dpe <- mSSL_dpe(X,Y)
fit_sep_sslg <- sep_sslg(X, Y)
round(error_B(fit_mSSL_dpe$B, B.orig), digits = 4)
round(error_B(fit_mSSL_dcpe$B, B.orig), digits = 4)
round(error_B(fit_sep_sslg$B, B.orig), digits = 4)
round(error_Omega(fit_mSSL_dpe$Omega, Omega_orig), digits = 4)
round(error_Omega(fit_mSSL_dcpe$Omega, Omega_orig), digits = 4)
round(error_Omega(fit_sep_sslg$Omega, Omega_orig), digits = 4)
plot_support(fit_mSSL_dpe)
library(MASS)
# squared exponential kernel
rbf <- function(x,xx,l){
r <- abs(x - xx)
return(exp(-1/(2*l) * r^2))
}
# Matern with nu = 3/2
matern_3 <- function(x, xx, l){
r <- abs(x- xx)
return( (1 + sqrt(3)*r/l) * exp(-sqrt(3)*r/l))
}
matern_5 <- function(x, xx, l){
r <- abs(x - xx)
return ( (1 + sqrt(5)*r/l + 5 * r^2/(3* l^2)) * exp(-sqrt(5)*r/l))
}
# 2-Wasserstein between gaussians
W2 <- function(K1, K2){
tmp <- sum(diag(K1)) + sum(diag(K2))
# eigen decomposition of K1
K1_eig <- eigen(K1)
# eigen decomposition of K2
K2_eig <- eigen(K2)
# Form square roots
K1_sqrt_eig <- list(values = sqrt(K1_eig$values), vectors = K1_eig$vectors)
K2_sqrt_eig <- list(values = sqrt(K2_eig$values), vectors = K2_eig$vectors)
K1_sqrt <- K1_eig$vectors %*% diag(sqrt(K1_eig$values)) %*% t(K1_eig$vectors)
K2_sqrt <- K2_eig$vectors %*% diag(sqrt(K2_eig$values)) %*% t(K2_eig$vectors)
# For the matrix Sigma_2^1/2 * Sigma_1 * Sigma_2^1/2
tmp_mat <- K2_sqrt %*% K1 %*% K2_sqrt
tmp_mat_eig <- eigen(tmp_mat)
tmp <- sum(K1_eig$values) + sum(K2_eig$values) - 2 * sum(sqrt(tmp_mat_eig$values))
if(abs(tmp) < 1e-12) tmp <- 0
return(sqrt(tmp))
}
get_kernel <- function(X, l = 1, sigma_y = 1, cov_function = c("matern-3", "matern-5", "rbf")){
if(cov_function == "matern-3"){
tmp <- outer(X,X,FUN = matern_3, l = l)
} else if(cov_function == "matern-5"){
tmp <- outer(X,X,FUN = matern_5, l = l)
} else if(cov_function == "rbf"){
tmp <- outer(X,X,FUN = rbf, l = l)
}
diag(tmp) <- diag(tmp) + sigma_y * sigma_y
return(tmp)
}
##############
# Draw data from Matern-3/2
set.seed(129)
n <- 1000
sigma_y <- 0.5
xstar <- 0
X <- sort(runif(n, -5, 5))
X_all <- c(X,xstar)
mean_K_all <- get_kernel(X_all, l = 1, sigma_y = 0, cov_function = "matern-3")
true_mean_all <- mvrnorm(n = 1, mu = rep(0, times = n+1), Sigma = mean_K_all)
true_mean <- true_mean_all[1:n]
y <- true_mean + rnorm(n, 0, sigma_y)
png("~/Documents/Research/gp_robustness/example_data.png", width = 6, height = 6, units = "in", res = 300)
par(mar = c(3,3,2,1), mgp = c(1.5, 0.8, 0), cex.main = 0.9, cex.axis= 0.7, cex.lab = 0.7)
plot(1, type = "n", xlim = c(-5,5), ylim = range(y), main = paste("Data from Matern_3/2, sigma_y =", sigma_y), xlab = "X", ylab = "y")
lines(X, true_mean, lwd = 2, col = 'red')
points(X,y, pch = 16, cex = 0.3)
points(xstar, true_mean_all[n+1], pch = 18, col = 'blue', cex = 0.8)
dev.off()
K0_full <- get_kernel(c(X,xstar), l = 1, sigma_y = sigma_y, cov_function = "matern-3")
K1_full <- get_kernel(c(X,xstar), l = 1, sigma_y = sigma_y, cov_function = "rbf")
K0_XX <- K0_full[1:n,1:n]
K0_xx <- K0_full[(n+1), (n+1)]
K0_Xx <- K0_full[1:n,(n+1)]
K0_xX <- K0_full[(n+1), 1:n]
K1_XX <- K1_full[1:n,1:n]
K1_xx <- K1_full[(n+1),(n+1)]
K1_Xx <- K1_full[1:n,(n+1)]
K1_xX <- K1_full[(n+1),1:n]
get_post_params <- function(K_full, y){
K_XX <- K_full[1:n, 1:n]
K_xx <- K_full[(n+1),(n+1)]
K_Xx <- K_full[1:n, (n+1)]
K_xX <- K_full[(n+1), 1:n]
# get the posterior mean
K_XX_inv <- solve(K_XX)
mu <- as.numeric(K_xX %*% K_XX_inv %*% y)
sigma <- as.numeric(sqrt(K_xx - K_xX %*% K_XX_inv %*% K_Xx))
return(c("mu" = mu, "sigma" = sigma))
}
post_000 <- get_post_params(K0_full,y)
post_025 <- get_post_params(0.75*K0_full + 0.25*K1_full,y)
post_050 <- get_post_params(K0_full * 0.5 + K1_full * 0.5, y)
post_075 <- get_post_params(0.25*K0_full + 0.75*K1_full,y)
post_090 <- get_post_params(0.1 *K0_full + 0.9 * K1_full,y)
post_099 <- get_post_params(0.01*K0_full + 0.99 * K1_full,y)
post_100 <- get_post_params(0*K0_full + 1 * K1_full,y)
x_seq <- seq(-3, 0, length = 1000)
png("~/Documents/Research/gp_robustness/posterior_epsilon.png", width = 6, height = 6, units = "in", res = 300)
par(mar = c(3,3,2,1), mgp = c(1.8, 0.5, 0), cex.main = 0.9, cex.lab = 0.8, cex.axis = 0.8)
plot(1, type = "n", xlim = range(x_seq), ylim = c(0, 0.85), xlab = "y*", ylab = "p(y*|y)", main = "Posterior distribution of y*")
lines(x_seq, dnorm(x_seq, mean = post_000["mu"], sd = post_000["sigma"]))
lines(x_seq, dnorm(x_seq, mean= post_075["mu"], sd = post_075["sigma"]), lty = 3, col = 'green')
lines(x_seq, dnorm(x_seq, mean = post_090["mu"], sd = post_090["sigma"]), lty = 3, col = 'blue')
lines(x_seq, dnorm(x_seq, mean = post_100["mu"], sd = post_100["sigma"]), lty = 1, col = 'red')
lines(x_seq, dnorm(x_seq, mean = post_099["mu"], sd = post_099["sigma"]), lty = 3, col = 'purple')
legend(x = -2.8, y = 0.75, legend = c("eps = 0", "eps = 0.75", "eps = 0.9", "eps = 0.99", "eps = 1.0"),
lty = c(1, 3, 3, 3, 1), col = c("black", "green", "blue", "purple", "red"),cex = 0.8, bty = "n")
lines(x = c(post_000["mu"], post_000["mu"]), y = c(par("usr")[3], dnorm(post_000["mu"], post_000["mu"], post_000["sigma"])), lty = 2)
lines(x = c(post_100["mu"], post_100["mu"]), y = c(par("usr")[3], dnorm(post_100["mu"], post_100["mu"], post_100["sigma"])), col = 'red', lty = 2)
text(x = -1.7, y = 0.1, labels = round(post_000["mu"], digits = 4), cex = 0.7)
text(x = -1.2, y = 0.1, labels = round(post_100["mu"], digits = 4), cex = 0.7, col = 'red')
dev.off()
numerator <- function(epsilon, mu0, K0, K1, y){
K_full <- (1 - epsilon) * K0 + epsilon * K1
post_params <- get_post_params(K_full,y)
return( (post_params["mu"] - mu0) )
}
numerator(0.75, mu0 = post_000["mu"], K0_full, K1_full, y)
post_075["mu"] - post_000["mu"]
eps_seq <- seq(0, 1, length = 10)
sapply(eps_seq, FUN = numerator, mu0 = post_000["mu"], K0 = K0_full, K1 = K1_full, y = y)
eps_seq <- seq(0, 1, length = 50)
tmp_numerator <- sapply(eps_seq, FUN = numerator, mu0 = post_000["mu"], K0 = K0_full, K1 = K1_full, y = y)
plot(eps_seq, tmp_numerator, pch = 16, cex = 0.8, xlab= "eps", ylab = "E(K_eps) - E(K_0)")
plot(eps_seq, log(tmp_numerator))
png("~/Documents/Research/gp_robustness/numerator.png", width = 6, height = 6, units = "in", res = 300)
par(mar = c(3,3,2,1), mgp = c(1.8, 0.5, 0), cex.main = 0.9, cex.axis = 0.9, cex.lab = 0.9)
plot(eps_seq, tmp_numerator, pch = 16, cex = 0.8, xlab= "eps", ylab = "E(K_eps) - E(K_0)")
dev.off()
help("rcauchy")
gamma(1000)
help(gamma)
gamma(100)
lgamma(1000)
library(Matrix)
p <- 10
M <- matrix(2*rbinom(p*p,0,1), p,)
M[lower.tri(M)] <- t(M)[lower.tri(t(M))]
rankMatrix(M)
M <- matrix(2*rbinom(p*p,0,1), p,)
M[lower.tri(M)] <- t(M)[lower.tri(t(M))]
rankMatrix(M)
M
M <- matrix(2*rbinom(p*p,1,1/2)-1, p,)
M[lower.tri(M)] <- t(M)[lower.tri(t(M))]
M
rankMatrix(M)
eigen(M)
min_eval <- min(eigen(M)$value)
library(Matrix)
library(matrixcalc)
install.packages("matrixcalc")
library(Matrix)
library(matrixcalc)
p <- 10
M <- matrix(2*rbinom(p*p,1,1/2)-1, p,)
M[lower.tri(M)] <- t(M)[lower.tri(t(M))]
attempt <- 0
min_eval <- min(eigen(M)$value)
min_eval
min_eval <- min(eigen(M)$value)
while(attempt < 100 | min_eval < 0){
M <- matrix(2*rbinom(p*p,1,1/2)-1, p,)
M[lower.tri(M)] <- t(M)[lower.tri(t(M))]
min_eval <- min(eigen(M)$value)
attempt <- attempt + 1
}
attempt
attempt <- 0
min_eval
attempt <- 0
while(attempt < 100 || min_eval < 0){
M <- matrix(2*rbinom(p*p,1,1/2)-1, p,)
M[lower.tri(M)] <- t(M)[lower.tri(t(M))]
min_eval <- min(eigen(M)$value)
attempt <- attempt + 1
}
attempt
attempt <- 0
min_eval <- min(eigen(M)$value)
while(attempt < 100){
print(attempt)
M <- matrix(2*rbinom(p*p,1,1/2)-1, p,)
M[lower.tri(M)] <- t(M)[lower.tri(t(M))]
min_eval <- min(eigen(M)$value)
attempt <- attempt + 1
}
attempt <- 0
min_eval <- min(eigen(M)$value)
min_eval
while(attempt < 100 | min_eval < 0){
print(attempt)
M <- matrix(2*rbinom(p*p,1,1/2)-1, p,)
M[lower.tri(M)] <- t(M)[lower.tri(t(M))]
min_eval <- min(eigen(M)$value)
attempt <- attempt + 1
}
min_eval <- min(eigen(M)$value)
while( (attempt < 100) || (min_eval < 0) ){
print(attempt)
M <- matrix(2*rbinom(p*p,1,1/2)-1, p,)
M[lower.tri(M)] <- t(M)[lower.tri(t(M))]
min_eval <- min(eigen(M)$value)
attempt <- attempt + 1
}
attempt <- 0
min_eval <- min(eigen(M)$value)
(attempt < 100) |(min_eval < 0)
min_eval < 0
min_eval <- min(eigen(M)$value)
min_eval
while( (attempt < 100) & (min_eval < 0) ){
print(attempt)
M <- matrix(2*rbinom(p*p,1,1/2)-1, p,)
M[lower.tri(M)] <- t(M)[lower.tri(t(M))]
min_eval <- min(eigen(M)$value)
attempt <- attempt + 1
}
min_eval
attempt <- 0
min_eval <- min(eigen(M)$value)
while( (attempt < 1e5) & (min_eval < 0) ){
print(attempt)
M <- matrix(2*rbinom(p*p,1,1/2)-1, p,)
M[lower.tri(M)] <- t(M)[lower.tri(t(M))]
min_eval <- min(eigen(M)$value)
attempt <- attempt + 1
}
diag(M)
min_eval <- min(eigen(M)$value)
attempt <- 0
while( (attempt < 1e3) & (min_eval < 0) ){
print(attempt)
M <- matrix(2*rbinom(p*p,1,1/2)-1, p,)
M[lower.tri(M)] <- t(M)[lower.tri(t(M))]
diag(M) <- 1
min_eval <- min(eigen(M)$value)
attempt <- attempt + 1
}
min_eval
diag(M)
eigen(M)
setwd("Documents/wharton_moneyball/website_files/")
library(rmarkdown)
render_site()
install.packages("vctrs")
x <- data.frame("a" = 1:10, b = c("a", "b", "c"))
x <- data.frame("a" = 1:3, b = c("a", "b", "c"))
x
is.numeric(x)
is.numeric(x[,1])
is.numeric(x[,2])
install.packages("Ecdat")
library(Ecdat)
data("PatentsHGH")
ls()
dim(PatentsHGH)
colnames(PatentsHGH)
table(PatentsHGH$obsno)
PatentsHGH[1:5, 1:10]
data("Produc")
dim(Produc)
Produc[1:10, 1:5]
plot(Produc[1:17, "pcap"])
data(Wages)
View(Wages)
data("Airline")
Airline[1:10,1:5]
table(Airline$airline)
data(Cigar)
dim(Cigar)
colnames(Cigar)
Cigar[1:10,]
plot(Cigar[Cigar$state == 1, "yeart"], Cigar[Cigar$state == 1, "price"])
plot(Cigar[Cigar$state == 1, "year"], Cigar[Cigar$state == 1, "price"])
plot(Cigar[Cigar$state == 1, "year"], Cigar[Cigar$state == 1, "sales"])
plot(Cigar[Cigar$state == 10, "year"], Cigar[Cigar$state == 10, "sales"])
plot(Cigar[Cigar$state == 10, "pmin"], Cigar[Cigar$state == 10, "sales"])
plot(Cigar[Cigar$state == 10, "pimin"], Cigar[Cigar$state == 10, "sales"])
data(Grunfeld)
Grunfeld[1:10, ]
data(PPP)
plot(PPP$lnit)
plot(PPP$lnit)
dim(PPP)
colnames(PPP)
is.data.frame(PPP)
PPP <- as.data.frame(PPP)
plot(PPP$lnit)
plot(PPP$lnit, type = "l")
plot(PPP$lnfr, type = "l")
plot(PPP$lnx, type = "l")
plot(PPP$cpiit, type = "l")
plot(exp(PPP$cpiit), type = "l")
rm(PPP)
rm(Airline)
rm(Grunfeld)
rm(Cigar)
rm(PatentsHGH)
rm(Produc)
rm(Wages)
data(Pricing)
dim(Pricing)
colnames(Pricing)
plot(Pricing[,"r1"])
plot(Pricing[,"r10"])
par(mfrow = c(5,2))
for(i in 1:10) plot(Pricing[,i])
par(mfrow = c(2,5))
for(i in 1:10) plot(Pricing[,i])
plot(Pricing[,"rf"], Pricing[,"r10"])
plot(Pricing[,"rf"], Pricing[,"r10"], type = "l")
plot(Pricing[,"cons"], Pricing[,"r10"])
plot(Pricing[,"rf"], type = "l")
data("RetSchool")
dim(RetSchool)
colnames(RetSchool)
library(parallel)
detectCores()
library(BART)
mc.cores.openmp()
library(np)
help(npscoefbw)
x <- 1:10
y <- rep(NA, times = 10)
mean( (x - y))
library(np)
data(wage1)
model <- with(wage1, npscoef(tydat = lwage,
txdat = exper,
tzdat = tenure,
beta = TRUE))
coef(model)
dim(coef(model))
library(VCBART)
setwd("Documents/Research/VC-BART/VCBART/")
library(Rcpp)
library(RcppArmadillo)
compileAttributes(verbose = TRUE)
